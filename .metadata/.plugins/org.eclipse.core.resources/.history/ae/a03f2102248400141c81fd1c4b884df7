package FF_11312_Cherenkov_PR.model;

import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;

import FF_11312_Cherenkov_PR.matrix.Point;
import FF_11312_Cherenkov_PR.matrix.transformation.EulerRotationTransform;
import FF_11312_Cherenkov_PR.matrix.transformation.ScaleTransform;
import FF_11312_Cherenkov_PR.matrix.transformation.Transformation;
import FF_11312_Cherenkov_PR.matrix.transformation.TransitionTransform;

/**
 * This class represents the whole scene that must be rendered
 * 
 * @author Pavle Cherenkov
 * 
 */
public class Scene extends Observable implements Observer {
	private ArrayList<Surface> surfaces;
	private ArrayList<SolidOfRevolution> bodies;
	private ArrayList<LightSource> lights;
	private ScaleTransform scale;
	private TransitionTransform transition;
	private Transformation rotation, rotationReverse;
	private Transformation m1, m1reverse;
	private Point corner1, corner2;
	private static final Point sceneCorner1, sceneCorner2;

	static {
		sceneCorner1 = new Point(-1, -1, 0);
		sceneCorner2 = new Point(1, 1, 1);
	}

	/**
	 * Default constructor
	 */
	public Scene() {
		surfaces = new ArrayList<>();
		bodies = new ArrayList<>();
		corner1 = new Point(-1, -1, 0);
		corner2 = new Point(1, 1, 1);
		transition = new TransitionTransform(0, 0, 0);
		scale = new ScaleTransform(1, 1, 1);
		rotation = new ScaleTransform(1, 1, 1);
		rotationReverse = new ScaleTransform(1, 1, 1);
	}

	/**
	 * Adds new body to the scene
	 * 
	 * @param body
	 *            new body
	 */
	public void addBody(SolidOfRevolution body) {
		bodies.add(body);
		body.addObserver(this);
		compile();
	}

	/**
	 * Removes a body from the scene
	 * 
	 * @param i
	 *            index of the body
	 */
	public void removeBody(int i) {
		bodies.remove(i).deleteObserver(this);
		compile();
	}

	/**
	 * Gets a body from the scene
	 * 
	 * @param i
	 *            index of the body
	 * @return body
	 */
	public SolidOfRevolution getBody(int i) {
		return bodies.get(i);
	}

	/**
	 * Get amount of bodies in the scene
	 * 
	 * @return body count
	 */
	public int getBodyConut() {
		return bodies.size();
	}

	/**
	 * Rotates the scene with given transformation
	 * 
	 * @param t
	 *            rotation transformation
	 */
	public void rotate(double a, double b, double c) {
		EulerRotationTransform t = new EulerRotationTransform(a, b, c);
		rotation = t.mult(rotation);
		m1 = t.mult(m1);

		EulerRotationTransform tr = new EulerRotationTransform(-c, -b, -a);
		rotationReverse = rotationReverse.mult(tr);
		m1reverse = m1reverse.mult(tr);

		setChanged();
		notifyObservers();
	}

	/**
	 * Computes a scene transformation so that bounding box lies in
	 * [-1,1]x[-1,1]x[0,1] and is rotated to some applied angles.
	 */
	public void compile() {
		surfaces.clear();
		for (SolidOfRevolution s : bodies) {
			Surface surface = s.getSurface();
			if (surface.getMinP() != null)
				surfaces.add(surface);
		}
		if (surfaces.isEmpty()) {
			setChanged();
			notifyObservers();
			return;
		}

		// Get bounding box
		corner1 = new Point(surfaces.get(0).getMinP());
		corner2 = new Point(surfaces.get(0).getMaxP());
		for (Surface s : surfaces) {
			corner1.setX(Math.min(corner1.getX(), s.getMinP().getX()));
			corner2.setX(Math.max(corner2.getX(), s.getMaxP().getX()));
			corner1.setY(Math.min(corner1.getY(), s.getMinP().getY()));
			corner2.setY(Math.max(corner2.getY(), s.getMaxP().getY()));
			corner1.setZ(Math.min(corner1.getZ(), s.getMinP().getZ()));
			corner2.setZ(Math.max(corner2.getZ(), s.getMaxP().getZ()));
		}

		// Get transformations
		Point scales = corner2.add(corner1.mult(-1));
		scale.setScale(2. / scales.getX(), 2. / scales.getY(),
				1. / scales.getZ());

		Point transitions = sceneCorner1.add(scale.mult(corner1).mult(-1));
		transition.setTrans(transitions);

		m1 = rotation.mult(transition.mult(scale));

		scale.setScale(scales.getX() / 2., scales.getY() / 2., scales.getZ());
		transition.setTrans(transitions.mult(-1));
		m1reverse = scale.mult(rotationReverse);

		setChanged();
		notifyObservers();
	}

	/**
	 * Get all of the surfaces in the scene
	 * 
	 * @return list of surfaces
	 */
	public ArrayList<Surface> getSurfaces() {
		return surfaces;
	}

	/**
	 * Gets transformation for the scene
	 * 
	 * @return transformation for the surfaces of the scene
	 */
	public Transformation getTransformation() {
		return m1;
	}
	
	public Transformation getRotation()
	{
		return rotation;
	}

	/**
	 * Gets reverse transformation for the scene
	 * 
	 * @return transformation for the surfaces of the scene
	 */
	public Transformation getNormalTransformation() {
		return m1reverse.transpose();
	}

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		compile();
	}
}
