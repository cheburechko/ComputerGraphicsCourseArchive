package FF_11312_Cherenkov_PR.model;

import java.util.Observable;
import java.util.Observer;

import FF_11312_Cherenkov_PR.matrix.Point;

public class Triangle implements Comparable<Triangle>, Observer {
	private Vertex vertices[];
	private double z[];
	private int material;

	public Triangle(Vertex p1, Vertex p2, Vertex p3, int material) {
		super();
		vertices = new Vertex[3];
		vertices[0] = p1;
		vertices[1] = p2;
		vertices[2] = p3;
		z = new double[3];
		for (int i = 0; i < 3; i++)
			vertices[i].addObserver(this);
		update(p1, null);

		this.material = material;
	}

	public Point get(int i) {
		return vertices[i].getPoint();
	}

	public Vertex getVertex(int i) {
		return vertices[i];
	}

	public int getMaterial() {
		return material;
	}

	@Override
	public int compareTo(Triangle o) {
		for (int i = 0; i < 3; i++)
			if (z[i] < o.z[i])
				return -1;
			else if (z[i] > o.z[i])
				return 1;
		return 0;

	}

	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		z[0] = Math.max(vertices[0].getPoint().getZ(), Math.max(vertices[1]
				.getPoint().getZ(), vertices[2].getPoint().getZ()));
		z[2] = Math.min(vertices[0].getPoint().getZ(), Math.min(vertices[1]
				.getPoint().getZ(), vertices[2].getPoint().getZ()));
		z[1] = vertices[0].getPoint().getZ() + vertices[1].getPoint().getZ()
				+ vertices[2].getPoint().getZ() - z[0] - z[2];
	}
}
