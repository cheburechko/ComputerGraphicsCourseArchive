package FF_11312_Cherenkov_PR.model;

import java.awt.Color;
import java.awt.color.ColorSpace;

import FF_11312_Cherenkov_PR.matrix.Point;

public class Triangle implements Comparable<Triangle> {
	private Vertex vertices[];
	private double z;
	private Color avgColor;

	public Triangle(Vertex p1, Vertex p2, Vertex p3) {
		super();
		vertices = new Vertex[3];
		vertices[0] = p1;
		vertices[1] = p2;
		vertices[2] = p3;
		z = (p1.getPoint().getZ() + p2.getPoint().getZ() + p3.getPoint().getZ()) / 3.;

		float cols[] = new float[4];
		for (int i = 0; i < 3; i++) {
			cols[i] = 0;
			for (int j = 0; j < 3; j++) {
				cols[i] += vertices[j].getColor(i) / 255.;
			}
			cols[i] /= 3;
		}
		cols[3] = (float) 1.;
		avgColor = new Color(ColorSpace.TYPE_RGB, cols, 1.);
	}

	public Color getColor() {
		return new Color(
				(float) ((p1.getColor(0) + p2.getColor(0) + p3.getColor(0)) / 3. / 255.),
				(float) ((p1.getColor(1) + p2.getColor(1) + p3.getColor(1)) / 3. / 255.),
				(float) ((p1.getColor(2) + p2.getColor(2) + p3.getColor(2)) / 3. / 255.),
				(float) 1.);
	}

	public Point get(int i) {
		if (i == 0)
			return p1.getPoint();
		else if (i == 1)
			return p2.getPoint();
		else
			return p3.getPoint();
	}

	@Override
	public int compareTo(Triangle o) {
		if (z < o.z)
			return 1;
		else
			return -1;

	}

	public double getZ() {
		return z;
	}
}
